{"ast":null,"code":"var _jsxFileName = \"/home/keviin/ramp-fe-challenge/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\n/* \n    Bug 3 fix\n      - call loadAllTransactions() if newValue's (if it exists) id, when the onChange callback is called, is empty\n    \n    Bug 5 fix\n      - moved setIsLoading(false) paginatedTransactions' callback and after employees  callback (fixes Part 1 and 2)\n        Part 1: once the employees promise is resolved, the loading is finished rather than when both paginatedTransactions' promise and \n        employees' promise are resolved\n        Part 2: moving the setIsLoading(false) before paginatedTransactions fixes part 2 because we no longer need to wait for the next page of paginated data\n          to be fetched for the employees to show up\n\n    Bug 6 fixes\n      - added boolean conditional before rendering View More button to check whether \n        the transaction is by an employee (in which case it isn't paginated per the README and therefore no need to render View More button)\n      - added boolean conditional before rendering View More button to check whether \n        the transaction (if paginated) has a next page. if it doesn't no need to render.\n    \n    Bug 7 fix\n      - moved invalidate data after the fetch since nulling the state variable fetching causes any approval changes to be lost\n*/\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    await employeeUtils.fetchAll(); // Bug 5 Part 1 and Part 2 fix. Employee filter is not loading while loading transactions but rather after employees request succeeds (per README)\n\n    setIsLoading(false);\n    await paginatedTransactionsUtils.fetchAll();\n    transactionsByEmployeeUtils.invalidateData(); // Bug 7 Fix: moved invalidate data after the fetch\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n    paginatedTransactionsUtils.invalidateData(); // Bug 7 Fix: moved invalidate data after the fetch\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          // We want to check if newValue id is null since the All Employee object does exist so the initial newValue === null would never validate even if there's no id.\n          if (!(newValue !== null && newValue !== void 0 && newValue.id)) {\n            // Bug 3 fix\n            await loadAllTransactions();\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), paginatedTransactions && // Bug 6 Part 1 Fix: if transactions are by an employee, then the paginatedTransactions state variable is nulled by line 62\n        (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && // Bug 6 Part 2 Fix: if nextPage is null, no need to render the View More button\n        transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"yXHk/2qvl++XLkP2SZkJsf+Vph0=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","loadAllTransactions","fetchAll","invalidateData","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue","nextPage"],"sources":["/home/keviin/ramp-fe-challenge/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["/* \n    Bug 3 fix\n      - call loadAllTransactions() if newValue's (if it exists) id, when the onChange callback is called, is empty\n    \n    Bug 5 fix\n      - moved setIsLoading(false) paginatedTransactions' callback and after employees  callback (fixes Part 1 and 2)\n        Part 1: once the employees promise is resolved, the loading is finished rather than when both paginatedTransactions' promise and \n        employees' promise are resolved\n        Part 2: moving the setIsLoading(false) before paginatedTransactions fixes part 2 because we no longer need to wait for the next page of paginated data\n          to be fetched for the employees to show up\n\n    Bug 6 fixes\n      - added boolean conditional before rendering View More button to check whether \n        the transaction is by an employee (in which case it isn't paginated per the README and therefore no need to render View More button)\n      - added boolean conditional before rendering View More button to check whether \n        the transaction (if paginated) has a next page. if it doesn't no need to render.\n    \n    Bug 7 fix\n      - moved invalidate data after the fetch since nulling the state variable fetching causes any approval changes to be lost\n*/\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    await employeeUtils.fetchAll()\n     // Bug 5 Part 1 and Part 2 fix. Employee filter is not loading while loading transactions but rather after employees request succeeds (per README)\n    setIsLoading(false)\n    await paginatedTransactionsUtils.fetchAll()\n    \n    transactionsByEmployeeUtils.invalidateData() // Bug 7 Fix: moved invalidate data after the fetch\n\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n      paginatedTransactionsUtils.invalidateData() // Bug 7 Fix: moved invalidate data after the fetch\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            // We want to check if newValue id is null since the All Employee object does exist so the initial newValue === null would never validate even if there's no id.\n            if (!newValue?.id) { \n              // Bug 3 fix\n              await loadAllTransactions() \n              return\n            }\n\n            await loadTransactionsByEmployee(newValue.id)\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {\n            paginatedTransactions &&  // Bug 6 Part 1 Fix: if transactions are by an employee, then the paginatedTransactions state variable is nulled by line 62\n            paginatedTransactions?.nextPage !== null && // Bug 6 Part 2 Fix: if nextPage is null, no need to render the View More button\n            transactions !== null && \n            ( \n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}