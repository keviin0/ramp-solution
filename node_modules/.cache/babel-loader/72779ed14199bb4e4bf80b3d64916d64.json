{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const nextPage = paginatedTransactions === null ? 0 : paginatedTransactions.nextPage; // compute next page. if null get first page, else get next\n\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null) {\n        return previousResponse;\n      } else if (previousResponse == null) {\n        return response;\n      } // Append new transactions to existing transactions\n\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","nextPage","response","page","previousResponse","data","invalidateData"],"sources":["/home/keviin/ramp-fe-challenge/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const nextPage = paginatedTransactions === null ? 0 : paginatedTransactions.nextPage // compute next page. if null get first page, else get next\n\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: nextPage\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null) {\n        return previousResponse;\n      } else if (previousResponse == null) {\n        return response;\n      }\n\n      // Append new transactions to existing transactions\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;EAIA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC,MAAMS,QAAQ,GAAGH,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACG,QAA5E,CADuC,CAC8C;;IAErF,MAAMC,QAAQ,GAAG,MAAMN,cAAc,CACnC,uBADmC,EAEnC;MACEO,IAAI,EAAEF;IADR,CAFmC,CAArC;IAOAF,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIF,QAAQ,KAAK,IAAjB,EAAuB;QACrB,OAAOE,gBAAP;MACD,CAFD,MAEO,IAAIA,gBAAgB,IAAI,IAAxB,EAA8B;QACnC,OAAOF,QAAP;MACD,CAL4C,CAO7C;;;MACA,OAAO;QACLG,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGH,QAAQ,CAACG,IAAvC,CADD;QAELJ,QAAQ,EAAEC,QAAQ,CAACD;MAFd,CAAP;IAID,CAZuB,CAAxB;EAaD,CAvB2B,EAuBzB,CAACL,cAAD,EAAiBE,qBAAjB,CAvByB,CAA5B;EAyBA,MAAMQ,cAAc,GAAGd,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEM,IAAI,EAAEP,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDM;EAAlD,CAAP;AACD;;GApCeX,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}